**装饰器模式 Decorator** 

职责:动态的为一个对象增加新的功能 

装饰模式是一种用于代替继承的技术，无须通过继承增加子类就能扩展对象的新功能。使用对象的关联关系代替继承关系，更加灵活，同时避免类型体系的快速膨胀

**优点**

1) 扩展对象功能，比继承灵活，不会导致类个数急剧增加 

2) 可以对一个对象进行多次装饰，创建出不同行为的组合

3) 具体构建类和具体装饰类可以独立变化，用户可以根据需要自己增加新的具体构件子类和具体装饰子类 

**缺点** 

1) 产生很多小对象。大量小对象占据内存，一定程序上影响性能 

2) 装饰模式易于出错，调试排查比较麻烦

**IO** **流实现细节** 

(1)抽象构件角色 InputStream,OutputStream,Reader,Writer 

(2)具体构件角色 FileInputStream,FileOutputStream 

(3)装饰器角色 FilterInputStream,FilterOutputStream持有一个抽象构件的引用 

(4)具体装饰角色 BufferedInputStream,BufferedOutputStream 等

